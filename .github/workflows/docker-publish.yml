name: Docker Build and Publish

on:
  push:
    branches: ['master', 'main']
  pull_request:
    branches: ['master', 'main']
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub
  REGISTRY: docker.io
  # Your Docker Hub username
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  # Repository name
  IMAGE_NAME: task-management-system

jobs:
  lint:
    name: Lint code and prettier
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      - name: Lint code
        run: npm run lint || true
      - name: Prettier
        run: npm run format || true

  test:
    runs-on: ubuntu-latest
    # Add environment variables for the test job
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      # Crear el archivo cypress.env.json con las credenciales
      - name: Create Cypress env file
        run: |
          echo '{
            "USERNAME": "${{ secrets.CYPRESS_USERNAME }}",
            "PASSWORD": "${{ secrets.CYPRESS_PASSWORD }}"
          }' > cypress.env.json

      # Alternativa: Si necesitas usar el archivo encriptado
      # - name: Decrypt cypress.env file
      #   run: |
      #     echo "${{ secrets.CYPRESS_ENV_ENCRYPTION_KEY }}" > ./key.txt
      #     openssl enc -aes-256-cbc -d -in cypress.env.enc -out cypress.env.json -pass file:./key.txt
      #     rm ./key.txt

      # Create a .env file for Cypress
      - name: Create .env file
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env

      - name: Build Next.js app and run Cypress tests
        run: |
          # Instalar paquete start-server-and-test con --legacy-peer-deps
          npm install --save-dev start-server-and-test --legacy-peer-deps

          # Construir la aplicación Next.js primero
          npm run build

          # Iniciar el servidor, esperar a que esté disponible, y luego ejecutar pruebas
          npx start-server-and-test "npm start" http://localhost:3000 "cypress run --spec 'cypress/e2e/**/*.cy.ts'"
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          CYPRESS_USERNAME: ${{ secrets.CYPRESS_USERNAME }}
          CYPRESS_PASSWORD: ${{ secrets.CYPRESS_PASSWORD }}

  build:
    runs-on: ubuntu-latest
    needs: test # This ensures build only runs after tests pass
    # Solo ejecutar este job en push a main/master (no en PRs)
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Debug secrets
      - name: Debug Secrets
        run: |
          echo "Checking secrets..."
          echo "DOCKERHUB_USERNAME is set: ${{ secrets.DOCKERHUB_USERNAME != '' }}"
          echo "DOCKERHUB_TOKEN is set: ${{ secrets.DOCKERHUB_TOKEN != '' }}"

      # Login to Docker Hub
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Debug Docker login
      - name: Verify Docker login
        run: |
          echo "Checking Docker login status..."
          docker info
          docker login --help

      # Build and tag the Docker image
      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build \
            --build-arg NODE_ENV=production \
            --build-arg PORT=3000 \
            --build-arg HOSTNAME=0.0.0.0 \
            --build-arg SECRET_KEY=${{ secrets.SECRET_KEY }} \
            -t ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest \
            -t ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            .

      # List built images
      - name: List Docker images
        run: |
          echo "Listing Docker images..."
          docker images

      # Push Docker image
      - name: Push Docker image
        run: |
          echo "Pushing Docker image..."
          docker push ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      # Debug Docker push
      - name: Debug Docker push
        run: |
          echo "Debugging Docker push..."
          echo "Image name: ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}"
          echo "Tags:"
          echo "- latest"
          echo "- ${{ github.sha }}"
          docker images
          docker inspect ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    # Solo ejecutar este job si el paso de build fue ejecutado (solo en push a main/master)
    if: github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG_B64 }}" | base64 -d > kubeconfig
          export KUBECONFIG=$PWD/kubeconfig
          kubectl rollout restart deployment frontend
